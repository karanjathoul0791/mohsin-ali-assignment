{"version":3,"sources":["components/Selectcity.jsx","App.js","reportWebVitals.js","index.js"],"names":["cityData","name","Selectcity","useState","city","setCity","useEffect","handleChange","e","target","checked","tempCity","map","cities","isChecked","className","style","width","margin","type","some","onChange","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAEMA,EAAW,CACf,CAAEC,KAAM,YACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YAwDKC,MArDf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACRD,EAAQL,KACP,IAEH,IAAMO,EAAe,SAACC,GACpB,MAA0BA,EAAEC,OAApBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,QACd,GAAa,cAATT,EAAsB,CACxB,IAAIU,EAAWP,EAAKQ,KAAI,SAACC,GACvB,OAAO,2BAAKA,GAAZ,IAAoBC,UAAWJ,OAEjCL,EAAQM,OACH,CACL,IAAIA,EAAWP,EAAKQ,KAAI,SAACC,GAAD,OACtBA,EAAOZ,OAASA,EAAhB,2BAA4BY,GAA5B,IAAoCC,UAAWJ,IAAYG,KAE7DR,EAAQM,KAIZ,OACE,qBAAKI,UAAU,GAAGC,MAAO,CAAEC,MAAO,SAAlC,SACE,uBAAMF,UAAU,GAAhB,UACE,6CACA,sBAAKA,UAAU,GAAGC,MAAO,CAAEE,OAAQ,QAAnC,UACE,uBACEC,KAAK,WACLJ,UAAU,mBACVd,KAAK,YACLS,SAAUN,EAAKgB,MAAK,SAACP,GAAD,OAAkC,KAAhB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,cACxCO,SAAUd,IAEZ,uBAAOQ,UAAU,GAAjB,2BAEDX,EAAKQ,KAAI,SAACC,EAAQS,GAAT,OACR,sBAAKP,UAAU,GAAf,UACE,uBACEI,KAAK,WACLJ,UAAU,mBACVd,KAAMY,EAAOZ,KACbS,SAAe,OAANG,QAAM,IAANA,OAAA,EAAAA,EAAQC,aAAa,EAC9BO,SAAUd,IAEZ,uBAAOQ,UAAU,GAAjB,SAAqBF,EAAOZ,SARPqB,YCjClBC,MATf,WACE,OACE,gCACE,0DACA,cAAC,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de15ce0b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst cityData = [\r\n  { name: \"Banglore\" },\r\n  { name: \"Mumbai\" },\r\n  { name: \"Chennai\" },\r\n];\r\n\r\nfunction Selectcity() {\r\n  const [city, setCity] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setCity(cityData);\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, checked } = e.target;\r\n    if (name === \"allSelect\") {\r\n      let tempCity = city.map((cities) => {\r\n        return { ...cities, isChecked: checked };\r\n      });\r\n      setCity(tempCity);\r\n    } else {\r\n      let tempCity = city.map((cities) =>\r\n        cities.name === name ? { ...cities, isChecked: checked } : cities\r\n      );\r\n      setCity(tempCity);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"\" style={{ width: \"500px\" }}>\r\n      <form className=\"\">\r\n        <h3>Select City</h3>\r\n        <div className=\"\" style={{ margin: \"auto\" }}>\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            name=\"allSelect\"\r\n            checked={!city.some((cities) => cities?.isChecked !== true)}\r\n            onChange={handleChange}\r\n          />\r\n          <label className=\"\">All Select</label>\r\n        </div>\r\n        {city.map((cities, index) => (\r\n          <div className=\"\" key={index}>\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name={cities.name}\r\n              checked={cities?.isChecked || false}\r\n              onChange={handleChange}\r\n            />\r\n            <label className=\"\">{cities.name}</label>\r\n          </div>\r\n        ))}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Selectcity;\r\n","import React from 'react'\r\n// import RadioButton from './components/RadioButton'\r\nimport Selectcity from './components/Selectcity'\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>React Coding Assignments</h1>\r\n      <Selectcity/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}